::Global Variable的用法，用于app一启动之的全局 https://github.com/richthofen911/ChatLite/blob/master/app/src/main/java/com/xtek/chatlite/GlobalVariable.java

::Task的概念
  http://www.cnblogs.com/duguguiyu/archive/2010/02/22/1671547.html

:: startActivityForResult与startActivity的不同之处：
    startActivity( ), 仅仅是跳转到目标页面，若是想跳回当前页面，则必须再使用一次startActivity( )。
    startActivityForResult( ) 可以一次性完成这项任务，当程序执行到这段代码的时候，假若从T1Activity跳转到下一个Text2Activity，而当这个Text2Activity调用了finish()方法以后，程序会自动跳转回T1Activity，并调用前一个T1Activity中的onActivityResult( )方法。

::安卓中Activity的onStart()和onResume()的区别是什么
  首先要知道Activity的四种状态：
  1. Active/Runing: 一个新 Activity 启动入栈后，它在屏幕最前端，处于栈的最顶端，此时它处于可见并可和用户交互的激活状态。 
  2. Paused: Activity可视但是它没有焦点，有可能原因是一个透明或者非全屏的Activity被激活(如dialog)。此时它依然与窗口管理器保持连接，系统继续维护其内部状态，所以它仍然可见，但它已经失去了焦点故不可与用户交互。 
  3. Stopped 当 Activity 被另外一个 Activity 覆盖、失去焦点并不可见时处于 Stopped 状态。 
  4. Killed Activity 被系统杀死回收或者没有被启动时处于 Killed 状态。
  protected void onStart() 该方法在 onCreate() 方法之后被调用，或者在 Activity 从 Stop 状态转换为 Active 状态时被调用，一般执行了onStart()后就执行onResume()。 
  protected void onResume() 在 Activity 从 Pause 状态转换到 Active 状态时被调用。
  onResume是activity获得用户焦点，在与用户交互
  onStart是activity用户可见，包括有一个activity在他上面，但没有将它完全覆盖，用户可以看到部分activity但不能与它交互
  
::一个Activity的启动顺序：
    onCreate()——>onStart()——>onResume()
  当另一个Activity启动时:
    第一个Activity onPause()——>第二个Activity::onCreate()——>onStart()——>onResume() ——>第一个Activity::onStop()
  当返回到第一个Activity时：
    第二个Activity::onPause() ——> 第一个Activity::onRestart()——>onStart()——>onResume()——>第二个Activity::onStop()——>onDestroy()
  
::activity的四种加载模式
　在android的多activity开发中，activity之间的跳转可能需要有多种方式，有时是普通的生成一个新实例，有时希望跳转到原来某个activity实例，而不是生成大量的重复的activity。加载模式便是决定以哪种方式启动一个跳转到原来某个Activity实例。
　　1. standard: 标准模式，一调用startActivity()方法就会产生一个新的实例。
　　2. singleTop: 如果已经有一个实例位于Activity栈的顶部时，就不产生新的实例，而只是调用Activity中的newInstance()方法。如果不位于栈顶，会产生一个新的实例。
　　3. singleTask: 会在一个新的task中产生这个实例，以后每次调用都会使用这个，不会去产生新的实例了。
　　4. singleInstance: 这个跟singleTask基本上是一样，只有一个区别：在这个模式下的Activity实例所处的task中，只能有这个activity实例，不能有其他的实例。
　　这些启动模式可以在功能清单文件AndroidManifest.xml中进行设置，中的launchMode属性。
　　相关的代码中也有一些标志可以使用,比如我们想只启用一个实例,则可以使用 Intent.FLAG_ACTIVITY_REORDER_TO_FRONT 标志，这个标志表示：如果这个activity已经启动了，就不产生新的activity，而只是把这个activity实例加到栈顶来就可以了。
　　例  Intent intent = new Intent(ReorderFour.this, ReorderTwo.class);
　　    intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
　　    startActivity(intent);
　　    
　四种加载模式的区别
　　：所属task的区别的区别
　　    一般情况下，“standard”和”singleTop”的activity的目标task，和收到的Intent的发送者在同一个task内，就相当于谁调用它，它就跟谁在同一个Task中。
　　    除非Intent包括参数FLAG_ACTIVITY_NEW_TASK。如果提供了FLAG_ACTIVITY_NEW_TASK参数，会启动到别的task里。
　　    “singleTask”和”singleInstance” 总是把要启动的activity作为一个task的根元素，他们不会被启动到一个其他task里。
　　：是否允许多个实例的区别
　　    “standard”和”singleTop”可以被实例化多次，并且是可以存在于不同的task中；这种实例化时一个task可以包括一个activity的多个实例；
　　    “singleTask”和”singleInstance”则限制只生成一个实例，并且是task的根元素。
　　    singleTop 要求如果创建intent的时候栈顶已经有要创建的Activity的实例，则将intent发送给该实例，而不创建新的实例。
　　：是否允许其它activity存在于本task内的区别
　　    “singleInstance”独占一个task，其它activity不能存在那个task里；
　　    如果它启动了一个新的activity，不管新的activity的launch mode 如何，新的activity都将会到别的task里运行（如同加了FLAG_ACTIVITY_NEW_TASK参数）。
　　    而另外三种模式，则可以和其它activity共存。
　　：是否每次都生成新实例的区别
　　    “standard”对于每一个启动Intent都会生成一个activity的新实例；
　　    “singleTop”的activity如果在task的栈顶的话，则不生成新的该activity的实例，直接使用栈顶的实例，否则，生成该activity的实例。
　　    比如：现在task栈元素为A-B-C-D（D在栈顶），这时候给D发一个启动intent，如果D是 “standard”的，则生成D的一个新实例，栈变为A－B－C－D－D。
　　    如果D是singleTop的话，则不会生产D的新实例，栈状态仍为A-B-C-D
　　    如果这时候给B发Intent的话，不管B的launchmode是”standard” 还是 “singleTop” ，都会生成B的新实例，栈状态变为A-B-C-D-B。
　　    “singleInstance”是其所在栈的唯一activity，它会每次都被重用。
　    　“singleTask” 如果在栈顶，则接受intent，否则，该intent会被丢弃，但是该task仍会回到前台。 当已经存在的activity实例处理新的intent时候，会调用onNewIntent()方法，如果收到intent生成一个activity实例，那么用户可以通过back键回到上一个状态；如果是已经存在的一个activity来处理这个intent的话，用户不能通过按back键返回到这之前的状态。    
　
::关于返回键和Home键对生命周期的影响
  BACK键的顺序： onPause->onStop->onDestroy->onCreate->onStart->onResume
  HOME键的执行顺序：onPause->onStop->onRestart->onStart->onResume
  
  http://blog.csdn.net/charein/article/details/39698429
  
::处理screen rotation
  发生旋转时
   1. 调用当前的Activity的onSaveInstanceState(Bundle outState)去保存应用中的一些数据，你可以重写这个方法
   2. 然后调用onDestroy()销毁当前的Activity
   3. 重新调用onCreate()或onRestoreInstanceState()方法去重新创建一个Activity（也就是说，程序会重新将onCreate中的代码在执行一遍）
  
  1. 最简单的:强制activity方向，即禁止screen rotation的调用
      android:screenOrientation="landscape" 或 "vertical"
      
  ::onSaveInstanceState()方法和noRestoreInstanceState()方法
    这两个不声明周期的方法，不一定会被调用。当遇意外情况（例如内存不足）由系统销毁一个activity时，
    onSaveInstanceState()会被调用。但当用户主动去销毁一个activity时，例如按back键，onSaveInstanceState()不会被调用
    因为这种情况下，用户的行为决定不需要保存activity的状态。通常onSaveInstanceState()只时候保存一些临时状态，而
    onPause()适合用于数据的持久化保存
    当屏幕方向发生改变，activity会被摧毁并重新创建，如果要在被摧毁之前缓存一些数据，并在activity被重建之后恢复
    这些数据，可以重写onSaveInstanceState()和onRestoreInstanceState()方法
    注意：在Activity的onCreate(Bundle savedInstanceState)方法里面，该方法的参数与onRestoreInstanceState()方法中的
    参数一致，因此在onCreate()方法中也能恢复缓存的数据。
    样例代码
    public class PreferencesActivity extends Activity {
        private String name;
        protected void onRestoreInstanceState(Bundle savedInstanceState) {
            name = savedInstanceState.getString("name"); //被重新创建后恢复缓存的数据
            super.onRestoreInstanceState(savedInstanceState);
        }
        protected void onSaveInstanceState(Bundle outState) {
            outState.putString("name", "liming");//被摧毁前缓存一些数据
            super.onSaveInstanceState(outState);
        }
    }
    
    捕获rotation:
    屏幕旋转时会触发onConfigurationChanged方法，***但此方法不是仅为rotation所用，其他情况也可能触发
    用于捕获的样例代码：
    @Override  
    public void onConfigurationChanged(Configuration newConfig) {  
        super.onConfigurationChanged(newConfig);  
        //newConfig.orientation获得当前屏幕状态是横向或者竖向  
        //Configuration.ORIENTATION_PORTRAIT 表示竖向  
        //Configuration.ORIENTATION_LANDSCAPE 表示横屏  
        if(newConfig.orientation==Configuration.ORIENTATION_PORTRAIT){  
            Toast.makeText(MainActivity.this, "现在是竖屏", Toast.LENGTH_SHORT).show();  
        }  
        if(newConfig.orientation==Configuration.ORIENTATION_LANDSCAPE){  
            Toast.makeText(MainActivity.this, "现在是横屏", Toast.LENGTH_SHORT).show();  
        }  
    }  
    
    
　
::参考链接 http://www.cnblogs.com/pepcod/archive/2013/02/11/2937403.html　　
　　
　　
　　
　　
　　
　　
　　
　　
　　
　　
　　
　　
　　
　　

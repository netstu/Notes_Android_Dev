::synchronized
  两个用法
    1. 修饰方法 例如 
       假设有一个银行账户，有十个线程要访问它，存钱进去，则有account中用于deposite的方法应该是
        public synchronized deposite(int amount)
       这样当不同线程调用account.deposite()时，account会被加锁
       synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为
        synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功
        更好的解决办法，就是 synchronized 块。  
    2. synchronized 代码块  语法如下：  
            synchronized(syncObject) {  
                //允许访问控制的代码  
            }  
        synchronized 块是这样的，其中的代码必须获得对象 syncObject （可以是类实例或类）的锁方能执行
        由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。  
        
        对synchronized(this)的一些理解 
        1） 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行
            另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。  
        2） 当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized
            (this)同步代码块。  
        3） 当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)
            同步代码块的访问将被阻塞。  
        
从java 1.5开始，提供了一些非常有用的辅助类来帮助进行并发编程，
比如CountDownLatch，CyclicBarrier和Semaphore  http://www.cnblogs.com/dolphin0520/p/3920397.html

CountDownLatch

CyclicBarrier(回环栅栏），可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，
CyclicBarrier可以被重用。暂且把这个状态就叫做barrier，当调用await()方法之后，线程就处于barrier了。
使用场景：
    假若有若干个线程都要进行写数据操作，并且只有所有线程都完成写数据操作之后，这些线程才能继续做后面的事情，
    此时就可以利用CyclicBarrier了：

Semaphore(信号量）
在操作系统中，信号量机制即利用pv操作来对信号量进行处理。semaphore的数据结构为一个值和一个指针，指针指向等待改信号量的
下一个进程，值大于0时表示当前可用资源的数量，小于零时的绝对值表示等待使用该资源的进程个数。
    p操作（wait）：申请一个单位资源，进程进入
    v操作（signal）：释放一个单位资源，进程出来
在JAVA中，是没有类似于PV操作、进程互斥等相关的方法的。JAVA的进程同步是通过synchronized()来实现的，需要说明的是，
JAVA的synchronized()方法类似于操作系统概念中的互斥内存块，在JAVA中的Object类型中，都是带有一个内存锁的，在有线程获取
该内存锁后，其它线程无法访问该内存，从而实现JAVA中简单的同步、互斥操作。
Semaphore可以控同时访问的线程个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。
若一个工厂有5台机器，8个工人，一台机器同时只能被一个工人使用，使用完了其他工人才能继续使用。那么就可以通过Semaphore来实现


对三个辅助类的总结：
　　1）CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：
　　　　CountDownLatch一般用于某个线程A等待若干个其他线程执行完任务之后，它才执行；

　　　　而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；
　　　　    另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。

　　2）Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。

::关于volatile关键字的用法  http://www.ibm.com/developerworks/cn/java/j-jtp06197.html
    Volatile 变量具有 synchronized 的可见性特性，但是不具备原子特性。线程能够自动发现 volatile 变量的最新值。
    Volatile变量可用于提供线程安全，但是只能应用于非常有限的一组用例。 因此，单独使用 volatile 还不足以实现计数器、
    互斥锁或任何具有与多个变量相关的不变式（Invariants）的类
    （例如 “start <=end”）。
    
    正确使用 volatile 变量：
        要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：
            1. 对变量的写操作不依赖于当前值。
            2. 该变量没有包含在具有其他变量的不变式中。
        第一个条件的限制使 volatile 变量不能用作线程安全计数器。虽然增量操作（x++）看上去类似一个单独操作，实际上它是
        一个由读取－修改－写入操作序列组成的组合操作，必须以原子方式执行，而 volatile 不能提供必须的原子特性。实现正确
        的操作需要使 x 的值在操作期间保持不变，而 volatile 变量无法实现这点。（如果将值调整为只从单个线程写入，那么可以
        忽略第一个条件。）
        大多数编程情形都会与这两个条件的其中之一冲突，使得 volatile 变量不能像 synchronized 那样普遍适用于实现线程安全
        

::object.wait() / object.notify() / object.notifyAll()         

  http://blog.csdn.net/heipacker/article/details/11990131
  
  java会为每个object对象分配一个monitor，当某个对象的同步方法（synchronized methods ）或同步快被多个线程调用时，
  该对象的monitor将负责处理这些访问的并发独占要求。当一个线程调用一个对象的同步方法时，JVM会检查该对象的monitor。
  如果monitor没有被占用，那么这个线程就得到了monitor的占有权，可以继续执行该对象的同步方法；如果monitor被其他线程所占用，
  那么该线程将被挂起，直到monitor被释放。当线程退出同步方法调用时，该线程会释放monitor，这将允许其他等待的线程获得
  monitor以使对同步方法的调用执行下去。
  任何一个时刻，对象的控制权（monitor）只能被一个线程拥有。
  无论是执行对象的wait、notify还是notifyAll方法，必须保证当前运行的线程取得了该对象的控制权（monitor）
  如果在没有控制权的线程里执行对象的以上三种方法，就会报java.lang.IllegalMonitorStateException异常。
  
  obj.wait()方法使本线程挂起，并释放obj对象的monitor，只有其他线程调用obj对象的notify()或notifyAll()时，才可以被唤醒。
  obj.notifyAll()方法唤醒所有阻塞在obj对象上的沉睡线程，然后被唤醒的众多线程竞争obj对象的monitor占有权，最终得到的那个线程
          会继续执行下去，但其他线程继续等待。
  obj.notify()方法是随机唤醒一个沉睡线程，过程更obj.notifyAll()方法类似。
  
  wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，
  如：
    synchronized(x){
      x.notify()
      //或者wait()
    }
    以上内容说明了为什么调用wait()，notify()，notifyAll()的线程必须要拥有obj实例对象的monitor占有权。
    每个对象实例都有一个等待线程队列。这些线程都是等待对该对象的同步方法的调用许可。对一个线程来说，有两种方法可以
    进入这个等待线程队列。一个是当其他线程执行同步方法时，自身同时也要执行该同步方法；另一个是调用obj.wait()方法。
    当同步方法执行完毕或者执行wait()时，其他某个线程将获得对象的访问权。当一个线程被放入等待队列时，必须要确保可以
    通过notify()的调用来解冻该线程，以使其能够继续执行下去


  http://blog.csdn.net/zyplus/article/details/6672775
  
  如果需要在线程间相互唤醒的话需要借助Object.wait(), Object.nofity()。
  Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法
  角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动
  释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()
  就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的
  synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续
  执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的
  区别在于Object.wait()在释放CPU同时，释放了对象锁的控制。      
  对Object.wait()，Object.notify()的应用最经典的例子，应该是三线程打印ABC的问题了吧，
  这是一道比较经典的面试题，题目要求如下：
        ----------------------------
        建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。
        ---------------------------
  这个问题用Object的wait()，notify()就可以很方便的解决。代码见连接里的博客
  
  
    



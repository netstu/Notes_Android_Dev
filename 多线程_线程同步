从java 1.5开始，提供了一些非常有用的辅助类来帮助进行并发编程，
比如CountDownLatch，CyclicBarrier和Semaphore  http://www.cnblogs.com/dolphin0520/p/3920397.html

CountDownLatch

CyclicBarrier(回环栅栏），可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，
CyclicBarrier可以被重用。暂且把这个状态就叫做barrier，当调用await()方法之后，线程就处于barrier了。
使用场景：
    假若有若干个线程都要进行写数据操作，并且只有所有线程都完成写数据操作之后，这些线程才能继续做后面的事情，
    此时就可以利用CyclicBarrier了：

Semaphore(信号量）
Semaphore可以控同时访问的线程个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。
若一个工厂有5台机器，8个工人，一台机器同时只能被一个工人使用，使用完了其他工人才能继续使用。那么就可以通过Semaphore来实现


对三个辅助类的总结：
　　1）CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：
　　　　CountDownLatch一般用于某个线程A等待若干个其他线程执行完任务之后，它才执行；

　　　　而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；
　　　　    另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。

　　2）Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。


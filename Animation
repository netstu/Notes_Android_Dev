针对Animation会展开较为完整详细的笔记
refs
http://blog.tingyun.com/web/article/detail/1004
http://blog.csdn.net/yanbober/article/details/46481171
http://blog.csdn.net/xyz_lmn/article/details/38667899
http://blog.csdn.net/guolin_blog/article/details/43536355

在学会如何写一个自定义控件，乃至制作动画之前，了解一个控件的绘制流程是必要的，在Android里，一个view的绘制流程顺序包括：
　　Measure -> Layout -> Draw
  
   onMeasure 知道一个view要占界面的大小，然后通过onLayout知道这个控件应该放在哪个位置，最后通过onDraw方法将这个控件绘制出来
             需要明白的一点是 ,测量所得的宽高不一定是最后展示的宽高，最后宽高确定是在onLayout方法里，layou（left，top，right，bottom）
   onLayout  方法里主要是具体摆放子view的位置，水平摆放或者垂直摆放，所以在单纯的自定义view是不需要重写onLayout方法，不过需要注意的一点是，
             子view的margin属性是否生效就要看parent是否在自身的onLayout方法进行处理，而view得padding属性是在onDraw方法中生效的。
   onDraw方法，如果是直接继承的View，那么在重写onDraw的方法是时候完全可以把super.ondraw(canvas)删掉，因为它的默认实现是空
   
Android上动画的分类
  |
  |--View Animation（出现与Android 3.0之前）
     ｜－　Tween(补间动画，就是针对view进行旋转，平移，缩放和渐变等的动画）　文件路径是　res/anim/filename.xml
          　 Tween Animation只能应用于View对象，而且只支持一部分属性，如支持缩放旋转而不支持背景颜色的改变。
             ***特别注意***: 对于Tween Animation，并不改变属性的值，它只是改变了View对象绘制的位置，而没有改变View对象本身，
                            比如，你有一个Button，坐标（100,100），Width:100,Height:100，而你有一个动画使其移动（200，200），
                            你会发现动画过程中触发按钮点击的区域仍是(100,100)-(200,200)。 
     ｜－　Frame（逐帧动画，也叫Drawable Animation，就是按帧播放的动画)　文件路径是　res/drawable/filename.xml
                          对应的Java类是 AnimationDrawable. 注*要打断这种动画要用setVisible而不是stop，详见doc
  |
  |--Property Animation 属性动画（Android 3.0之后）　这些xml文件定义的文件路径是res/animator/filename.xml
      相对于View Animation的进步在于
      １．View Animation只能够作用在View上，　而属性动画动画可以设置给任何Object，包括那些还没有渲染到屏幕上的对象。
      ２．属性动画是可扩展的，可以让你自定义任何类型和属性，比如动态改变View的背景色，就无法用View animation完成。
      ３．实现了改变属性，即针对上面的***特别注意***，在属性动画中，按钮移动后触发点击的区域也是移动后的位置
     总结来说，属性动画的设计不再是针对于View，也不只是视觉上的动画效果，而是不断对值进行操作的机制。 
     ValueAnimator是整个属性动画机制当中最核心的一个类，对象初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的。
     它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，
     ValueAnimator就会自动帮我们完成从初始值平滑地过渡到结束值这样的效果。除此之外，ValueAnimator还负责管理动画的播放次数、播放模式、以及对
     动画设置监听器等,　可以方便的实现对一个对象的单一变化操作，比如alpha变化，旋转，沿X轴或Y轴平移之类的
     **组合动画**，　要实现复杂的动画，就需要用到组合动画，借助AnimatorSet这个类。这个类提供了一个play()方法，
                  　如果向这个方法中传入一个Animator对象(通常是ValueAnimator或ObjectAnimator)将会返回一个AnimatorSet.Builder的实例，
                     AnimatorSet.Builder中包括以下四个方法：
                      after(Animator anim)   将现有动画插入到传入的动画之后执行
                      after(long delay)   将现有动画延迟指定毫秒后执行
                      before(Animator anim)   将现有动画插入到传入的动画之前执行
                      with(Animator anim)   将现有动画和传入的动画同时执行
                   
      Animator监听器，通常用于添加一些逻辑处理。Animator类(ValueAnimator, ObjectAnimator, AnimatorSet)中提供了一个addListener()方法，
      接收一个AnimatorListner, 监听　onStart, onEnd, onCancel, onRepeat
      
      ***用XML编写***
      属性动画像补间动画一样，也可以通过xml实现。通过XML来编写动画可能会比通过代码来编写动画要繁琐一些，
      但是在重用方面将会变得非常轻松，比如某个将通用的动画编写到XML里面，可以在各个界面当中轻松去重用它。
      在res/animator/ 文件夹下，一共可以使用三种标签：
        <animator>  对应代码中的ValueAnimator
        <objectAnimator>  对应代码中的ObjectAnimator
        <set>  对应代码中的AnimatorSet
        
        例１ObjectAnimator的使用
        　<objectAnimator xmlns:android="http://schemas.android.com/apk/res/android"  
            android:valueFrom="1"  
            android:valueTo="0"  
            android:valueType="floatType"  
            android:propertyName="alpha"/>  
            
        例２　组合动画
          <set xmlns:android="http://schemas.android.com/apk/res/android"  
                android:ordering="sequentially" >  

                <objectAnimator  
                    android:duration="2000"  
                    android:propertyName="translationX"  
                    android:valueFrom="-500"  
                    android:valueTo="0"  
                    android:valueType="floatType" >  
                </objectAnimator>  

                <set android:ordering="together" >  
                    <objectAnimator  
                        android:duration="3000"  
                        android:propertyName="rotation"  
                        android:valueFrom="0"  
                        android:valueTo="360"  
                        android:valueType="floatType" >  
                    </objectAnimator>  

                    <set android:ordering="sequentially" >  
                        <objectAnimator  
                            android:duration="1500"  
                            android:propertyName="alpha"  
                            android:valueFrom="1"  
                            android:valueTo="0"  
                            android:valueType="floatType" >  
                        </objectAnimator>  
                        <objectAnimator  
                            android:duration="1500"  
                            android:propertyName="alpha"  
                            android:valueFrom="0"  
                            android:valueTo="1"  
                            android:valueType="floatType" >  
                        </objectAnimator>  
                    </set>  
                </set>  
            </set>  

 加载xml动画
  Animator animator = AnimatorInflater.loadAnimator(context, R.animator.anim_file);  
  animator.setTarget(view);  
  animator.start();  
        

::ValueAnimator的高级用法
  比如说有一个自定义的View，在这个View当中有一个Point对象用于管理坐标，然后在onDraw()方法当中就是根据这个Point对象的坐标值来进行绘制的。
  也就是说，如果我们可以对Point对象进行动画操作，那么整个自定义View的动画效果就有了，那么这就要用到高级一些的方法。在此之前，还需要掌握
  另外一个知识点，就是TypeEvaluator接口的用法。TypeEvaluator简单来说就是告诉动画系统如何从初始值过度到结束值。在上面的ValueAnimator.ofFloat()
  方法就是实现了初始值与结束值之间的平滑过度，那么这个平滑过度是怎么做到的呢？其实就是系统内置了一个FloatEvaluator，
  它通过计算告知动画系统如何从初始值过度到结束值。FloatEvaluator的代码实现：
    public class FloatEvaluator implements TypeEvaluator {  
        public Object evaluate(float fraction, Object startValue, Object endValue) {  
            float startFloat = ((Number) startValue).floatValue();  
            return startFloat + fraction * (((Number) endValue).floatValue() - startFloat);  
        }  
    }  
    第一个参数fraction非常重要，这个参数用于表示动画的完成度的，根据它来计算当前动画的值应该是多少
    代码的逻辑就很清晰了，用结束值减去初始值，算出它们之间的差值，然后乘以fraction这个系数，再加上初始值，得到当前动画的值
    
  FloatEvaluator是系统内置好的功能，并不需要我们自己去编写，但介绍它的实现方法是要为我们后面的功能铺路的。前面使用过了
  ValueAnimator的ofFloat()和ofInt()方法，分别用于对浮点型和整型的数据进行动画操作的，但实际上ValueAnimator中还有一个ofObject()方法，
  是用于对任意对象进行动画操作的。但是相比于浮点型或整型数据，对象的动画操作明显要更复杂一些，因为系统将完全无法知道如何从初始对象过度到结束对象，
  因此这个时候我们就需要实现一个自己的TypeEvaluator来告知系统如何进行过度。
  一般来说先定义一个Point类，构造器很简单，　Point(float x, float y), 方法就是getX(), getY()
  然后implements TypeEvaluator
   public class PointEvaluator implements TypeEvaluator{  
      @Override  
      public Object evaluate(float fraction, Object startValue, Object endValue) {  
          Point startPoint = (Point) startValue;  
          Point endPoint = (Point) endValue;  
          float x = startPoint.getX() + fraction * (endPoint.getX() - startPoint.getX());  
          float y = startPoint.getY() + fraction * (endPoint.getY() - startPoint.getY());  
          Point point = new Point(x, y);  
          return point;  
       }  
    }  
  
  这样我们就将PointEvaluator编写完成了，接下来我们就可以非常轻松地对Point对象进行动画操作了，比如说我们有两个Point对象，]
  现在需要将Point1通过动画平滑过度到Point2，就可以这样写：
   Point point1 = new Point(0, 0);  
   Point point2 = new Point(300, 300);  
   ValueAnimator anim = ValueAnimator.ofObject(new PointEvaluator(), point1, point2);  
   anim.setDuration(5000);  
   anim.start();  
   这里需要注意的是，ofObject()方法要求多传入一个TypeEvaluator参数，这里只需要传入刚才定义好的PointEvaluator的实例就可以了。
   
   掌握了这些知识之后，我们就可以来尝试一下如何通过对Point对象进行动画操作，从而实现整个自定义View的动画效果。
   新建一个MyAnimView继承自View，代码如下所示：
     public class MyAnimView extends View {  
        public static final float RADIUS = 50f;  
        private Point currentPoint;  
        private Paint mPaint;  

        public MyAnimView(Context context, AttributeSet attrs) {  
            super(context, attrs);  
            mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);  
            mPaint.setColor(Color.BLUE);  
        }  

        @Override  
        protected void onDraw(Canvas canvas) {  
            if (currentPoint == null) {  
                currentPoint = new Point(RADIUS, RADIUS);  
                drawCircle(canvas);  
                startAnimation();  
            } else 
                drawCircle(canvas);  
        }  

        private void drawCircle(Canvas canvas) {  
            float x = currentPoint.getX();  
            float y = currentPoint.getY();  
            canvas.drawCircle(x, y, RADIUS, mPaint);  
        }  

        private void startAnimation() {  
            Point startPoint = new Point(RADIUS, RADIUS);  
            Point endPoint = new Point(getWidth() - RADIUS, getHeight() - RADIUS);  
            ValueAnimator anim = ValueAnimator.ofObject(new PointEvaluator(), startPoint, endPoint);  
            anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {  
                @Override  
                public void onAnimationUpdate(ValueAnimator animation) {  
                    currentPoint = (Point) animation.getAnimatedValue();  
                    invalidate();  
                }  
            });  
            anim.setDuration(5000);  
            anim.start();  
        }  
    }  
    
    利用xml给自定义view的属性赋值：
    　　需要在values/attrs.xml 文件里定义一个name为自己定义view名字的declare-styleable，　形如
    　　<resources>
            <declare-styleable name="SketchView">
                <attr name="radius" format="dimension"/>    
            </declare-styleable>
        </resources>
        这样就可以在layout文件的xml里对自定义的view使用自己定义的属性了
        <net.callofdroidy.net.MyView
          ...
          app:radius="20dp"
          ... />
       要用上这个属性，则需要MyView使用带dfStyleAttr这个参数的构造器
       
 
   Interpolator（插值器)的用法
      主要作用是控制动画的变化速率，比如实现一种非现行运动的动画效果。从Android 1.0版本开始就一直存在Interpolator接口了，而之前的补间动画
      当然也是支持这个功能的。只不过在属性动画中新增了一个TimeInterpolator接口，这个接口是用于兼容之前的Interpolator的，这使得所有过去的
      Interpolator实现类都可以直接拿过来放到属性动画当中使用。TimeInterpolator接口已经有非常多的实现类了，这些都是Android系统内置好的
      并且我们可以直接使用的Interpolator。每个Interpolator都有它各自的实现效果，比如说AccelerateInterpolator就是一个加速运动的
      Interpolator，而DecelerateInterpolator就是一个减速运动的Interpolator。系统自带的AccelerateD ateInterpolator源码如下
        
        public class AccelerateDecelerateInterpolator implements Interpolator, NativeInterpolatorFactory {  
            public AccelerateDecelerateInterpolator() {  
            }  

            @SuppressWarnings({"UnusedDeclaration"})  
            public AccelerateDecelerateInterpolator(Context context, AttributeSet attrs) {  
            }  

            public float getInterpolation(float input) {  
                return (float)(Math.cos((input + 1) * Math.PI) / 2.0f) + 0.5f;  //主要逻辑就在这里了。三角函数刚好能让值实现周期变化
            }  

            /** @hide */  
            @Override  
            public long createNativeInterpolator() {  
                return NativeInterpolatorFactoryHelper.createAccelerateDecelerateInterpolator();  
            }  
        }  
      
      

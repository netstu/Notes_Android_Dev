::Android主要源代码
  Linux kernel
  bionic   -------- Android标准C运行支持库
  bootloader -------Android 内核加载器参考
  build  -----------Android的build系统
  cts   ------------Android兼容性测试源
  dalvik VM
  external ---------Android使的开放源
  frameworks -------Android框架
  hardware ---------Android HAL(Hardware Abstraction Layer)库源
  packages ---------包含Android基本应用，例如Content Provider等
  system  ----------Android 初始化进程，蓝牙工具集等
  
::Android的Service Framework和Binder Driver
  服务管理器Service Server:     指运行系统服务的进程，相当于System Server或Media Server
  服务客户端Server Client:      指使用系统服务的进程
  上下文管理器Context Manager:  是一个管理系统服务的系统进程，它管理安装在系统中的各种系统服务的位置信息Handle，这些
                                Handle用来指定BinderIPC目的地址
  服务框架Service Framework:    包含Service Manager，其中定义了一系列类，用于服务使用者与系统服务间的RPC操作
  服务接口Service Interface:    它是预先定义的即口，用于在服务使用者与系统服务间。系统服务应该根据相关接实现stub函数
                                并提供相关服务，而使用者也必须根据相关接口调用服务
  服务使用者                    在服务客户进程中实际使用服务的模块
  服务Service:                  由服务stub函数实现定义在服务接口中的功能，是提供实际服务功能的模块
  服务代理Service Proxy:        执行RPC时用来对数据进行Marshalling(装配)处理对象，不同的服务接口对应不同的服务代理，
                                它提供服务代码函数，根据服务接口中定义的函数，对数据分别进行不同的Marshalling处理
  服务stub:                     RPC执时用来对数据进行UnMarshalling(拆卸)处理的对象，该对象随接口不同而不同。它对接
                                收到的数据进行UnMarshalling处理后，调用相关的服务stub函数
  Binder Driver:                简称Binder，是Android中为支持IPC而采用的机制，它以Android版Linux内核的Device Driver
                                形态存在
  Binder IPC:                   Inter Process Communication
  Binder RPC:                   (Remote Procedure Call)服务会向使用者提供基于特定服务接口的函数，服务使用者通过
                                Binder IPC调这些函数，就像调用自身函数一样。
                                
::init进程
  init进程运行过程
    init是由内核启动的第一个用户级进程
    内核启动过程  start_kernel()--->init_post()--->run_init_process() ---->init进程运行
    正常情况下编译完Android后生成的根文系统中，init进位于最顶层目录，如果找不到或未指定，内核会到/sbin,/etc和/bin
    目录下查找init文件，如果仍为找到，内核会终止执行init进程，并引发Kernel Panic
    

::Zygote相关
  Zygote系应用一个相当重要的进程，主要功能是执行Android应用程序，在Android系统中运行新的应，如同卵子受精分裂
  一样(Zygote的原意是受精卵，结合体)，需要跟Zygote进程(拥有应用程序运行是所需要的各种元素与条件结合）结合后才能执行
  Zygote进程运行时，会初始化Dalvik虚拟机并启动它。应用程序每次运行都要重新初始化并启动虚拟机，该过程会耗费相当长时
  间，因此在应用程序运行前，Zygote进程通过共享已运的虚拟机代码与内存信息，缩短应用程序运行所耗费的时间，并且会事先
  将应用程序使用Android Framework中的类与资源加载到内存中，并组织形成所用资源的链接信息。新运行的应用程序在使用所
  需资源时不必每次重新形成资源的链接信息，这会节省大量时间，提运行速度。
  Zygote由Java写成，不能直接由init进程启动运行，若要运行Zygote类需要生成Davlik虚拟机，再在虚拟上装载运行ZygoteInit类
  执行这一任务的app_precess进程。 
  /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
  app_process先生成一个AppRuntime对象而后分析main()函数传递进来的参数并传递给AppRuntime对象以生成并初始化虚拟机
  再调用ZygoteInit.main()生成Zygote
  
  
  
::关于Android中的PID
  Android设备中运行的进程大致有Daemon进程以及在Dalvik虚拟机中运行的应用程序进程两大类。PID为1的进程是init进程，
  其中还有PPID(Parent PID)为1的进程，他们就是init进程启的Daemon进程，Zygote进程就是其中之一。Zygote进程的PID为
  30, PPID为30的进程Zygote子进程，由Zygote创建，大都是应用程序

::Linux中创建进程和android中Zygote的区别  
  《Android框架揭秘》p.140
  
::Android Binder IPC
  Binder本来是IPC(Inter Process Communication)工具，但再Android中它主要用于支持RPC(Remote Procedure Call)，使得
  当进程调用另一个进程的函数时就像调用自身的函数一样简单
  Android进程与Linux进程一样，只运行再进程故有的虚拟地址空间中，一个4GB的虚拟地址空间，其中3GB是用户空间，剩余
  1GB是内核空间(可通过内核设定修改)。用户代码与相关库分别运行在用户空间的代码区域、数据区域以及堆栈区域中，而
  内核空间中运行的代码则运行再内核空间的相应区域中，并且进程具有各自的独立地址空间，单独运行。
  那么，一个独立空间的进程如何向另一个进程传递数据呢？显然需要通过进程共享的内核空间。从内核的角度看，进程只是
  一个作业单位，虽然各进程的用户空间相互独立，但运行在内核空间中的任务数据、代码都是彼此共享的
  《Android框架揭秘》p.198  Linux本身提供PIC工具，但Android使用的Binder提供更丰富的功能，不仅可以实现IPC，还能
  调用另一个进程的函数

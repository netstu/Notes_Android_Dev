::Service中使用Handler
  onCreate()中
    handlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    handlerThread.start();
    handler = new Handler(handlerThread.getLooper());
    
  具体要用的地方再handler.post(Runnable)

::进程和线程的区别:
  一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序的运行。而线程是在进程中执行的一个任务。
  Java运行环境是一个包含了不同的类和程序的单一进程。线程可以被称为轻量级进程。线程需要较少的资源来创建和驻留
  在进程中，并且可以共享进程中的资源。
  
::多线程的好处:
  多个线程被并发的执行以提高程序的效率，CPU不会因为某个线程需要等待资源而进入空闲状态。多个线程
  共享堆内存(heap memory)，因此创建多个线程去执行一些任务会比创建多个进程更好。比如Servlets比CGI更好，
  是因为Servlets支持多线程而CGI不支持。
  
::用户线程和守护线程的区别:
  当在Java程序中创建一个线程，它就被称为用户线程。一个守护线程是在后台执行并且不会阻止JVM终止的线程.
  当没有用户线程在运行的时候，JVM关闭程序并且退出。一个守护线程创建的子线程依然是守护线程。
  
::当我们在Java程序中新建一个线程时，它的状态是New。当我们调用线程的start()方法时，状态被改变为Runnable.
  线程调度器会为Runnable线程池中的线程分配CPU时间并且讲它们的状态改变为Running。
  其他的线程状态还有Waiting，Blicked 和Dead
  详细解释 http://www.journaldev.com/1044/life-cycle-of-thread-understanding-thread-states-in-java

::让正在运行的线程暂停一段时间:
  可以使用Thread类的Sleep()方法让线程暂停一段时间。需要注意的是，这并不会让线程终止，一旦从休眠中唤醒线程，
  线程的状态将会被改变为Runnable，并且根据线程调度，它将得到执行。
  
::对线程优先级的理解
  每一个线程都是有优先级的，一般来说，高优先级的线程在运行时会具有优先权，但这依赖于线程调度的实现，这个实现是和
  操作系统相关的(OS dependent)。我们可以定义线程的优先级，但是这并不能保证高优先级的线程会在低优先级的线程前执行。
  线程优先级是一个int变量(从1-10)，1代表最低优先级，10代表最高优先级。
  
::线程调度器(Thread Scheduler)和时间分片(Time Slicing )
  线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一们创建一个线程并启动它，它的执行便依赖于
  线程调度器的实现。时间分片是指将可用的CPU时间分配给可用的Runnable线程的过程。分配CPU时间可以基于线程优先级或者
  线程等待的时间。线程调度并不受到Java虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖
  于线程的优先级）
  
::在多线程中，什么是上下文切换(context-switching )
  上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行。
  上下文切换是多任务操作系统和多线程环境的基本特征
  
::如何确保main()方法所在的线程是Java 程序最后结束的线程？
  可以使用Thread类的joint()方法来确保所有程序创建的线程在main()方法退出前结束  
  具体见链接 http://www.journaldev.com/1024/java-thread-join-example-with-explanation
  
::线程之间是如何通信的？
  当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。
  Object类中wait()\notify()\notifyAll()方法可以用于线程间通信关于资源的锁的状态。
  http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example
  
::为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object 类里？
  Java的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程
  对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，
  这样Java的每一个类都有用于线程间通信的基本方法  
  
::为什么wait(), notify()和notifyAll ()必须在同步方法或者同步块中被调用？
  当一个线程需要调用对象的wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到
  其他线程调用这个对象上的notify()方法。同样的，当一个线程需要调用对象的notify()方法时，它会释放这个对象的锁，以便
  其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，
  所以他们只能在同步方法或者同步块中被调用  
  
::如何确保线程安全？
  在Java中可以有很多方法来保证线程安全,如:同步，使用原子类(atomic concurrent classes)，实现并发锁，使用volatile
  关键字，使用不变类和线程安全类。
  http://www.journaldev.com/1061/java-synchronization-and-thread-safety-tutorial-with-examples
  
::volatile关键字在Java 中有什么作用？
  当我们使用volatile关键字去修饰变量的时候，所以线程都会直接读取该变量并且不缓存它。这就确保了线程读取到的变量
  是同内存中是一致的。
  
::同步方法和同步块，哪个是更好的选择？
  同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类
  中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。  

::如何创建守护线程？
  使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，
  否则会抛出IllegalThreadStateException异常。

::什么是ThreadLocal?
  ThreadLocal用于创建线程的本地变量，我们知道一个对象的所有线程会共享它的全局变量，所以这些变量不是线程安全的，
  我们可以使用同步技术。但是当我们不想使用同步的时候，我们可以选择ThreadLocal变量。
  每个线程都会拥有他们自己的Thread变量，它们可以使用get()\set()方法去获取他们的默认值或者在线程内部改变他们的值。
  ThreadLocal实例通常是希望它们同线程状态关联起来是private static属性。
  http://www.journaldev.com/1076/java-threadlocal-example-to-create-thread-local-variables
  
::什么是Java线程转储(Thread Dump )，如何得到它？
  线程转储是一个JVM活动线程的列表，它对于分析系统瓶颈和死锁非常有用。有很多方法可以获取线程转储例如使用:
  Profiler，Kill -3命令，jstack工具等等。jstack工具容易使用并且是JDK自带的。由于它是一个基于终端的工具，所以可以
  编写一些脚本去定时的产生线程转储以待分析  
  http://www.journaldev.com/1053/how-to-generate-thread-dump-in-java
  
::什么是死锁(Deadlock )？如何分析和避免死锁？
  死锁是指两个以上的线程永远阻塞的情况，这种情况产生至少需要两个以上的线程和两个以上的资源。
  分析死锁，我们需要查看Java应用程序的线程转储。我们需要找出那些状态为BLOCKED的线程和他们等待的资源。每个资源都有
  一个唯一的id，用这个id我们可以找出哪些线程已经拥有了它的对象锁。避免嵌套锁，只在需要的地方使用锁和避免无限期
  等待是避免死锁的通常办法  
  http://www.journaldev.com/1058/java-deadlock-example-and-how-to-analyze-deadlock-situation
  
::Java Timer类,如何创建一个有特定时间间隔的任务？
  java.util.Timer是一个工具类，可以用于安排一个线程在未来的某个特定时间执行。Timer类可以用安排一次性任务或者
  周期任务。java.util.TimerTask是一个实现了Runnable接口的抽象类，我们需要去继承这个类来创建我们自己的定时任务
  并使用Timer去安排它的执行。  
  http://www.journaldev.com/1050/java-timer-and-timertask-example-tutorial
  
::什么是线程池？如何创建一个Java 线程池？
  线程池管理一组工作线程，同时它还包括了一个用于放置等待执行的任务的队列。
  java.util.concurrent.Executors提供了一个 java.util.concurrent.Executor接口的实现用于创建线程池。
  线程池例子 
    http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor
  ScheduledThreadPoolExecutor例子---了解如何创建一个周期任务   
    http://www.journaldev.com/2340/java-scheduledthreadpoolexecutor-example-to-schedule-tasks-after-delay-and-execute-periodically

----------------------------------------------------------
关于java中并发
::什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes )？
  原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
  int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。
  为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
  到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的封装类，它们可以自动的保证对于他们的操作是原子的
  并且不需要使用同步
  http://www.journaldev.com/1095/java-atomic-operations-atomicinteger-example
  
::Java Concurrency API中的Lock接口(Lock interface )是什么？对比同步它有什么优势？
  Lock接口比同步方法和同步块提供了更具扩展性的锁操作。他们允许更灵活的结构，可以具有温泉不同的性质，并且可以支持多个相关类的条件对象。
  它的优势有：
    可以使锁更公平
    可以使线程在等待锁的时候响应中断
    可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间
    可以在不同的范围，以不同的顺序获取和释放锁  
  http://www.journaldev.com/2377/java-lock-example-and-concurrency-lock-vs-synchronized
  
::Executors 框架
  Executor框架同java.util.concurrent.Executor 接口在Java 5中被引入。Executor框架是一个根据一组执行策略
  调用，调度，执行和控制的异步任务的框架。无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的
  解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池  
  http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor
  
::什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？
  java.util.concurrent.BlockingQueue的特性是：当队列是空的时，从队列中获取或删除元素的操作将会被阻塞，或者当队列
  是满时，往队列里添加元素的操作会被阻塞。阻塞队列不接受空值，当你尝试向队列中添加空值的时候，它会抛出
  NullPointerException。阻塞队列的实现都是线程安全的，所有的查询方法都是原子的并且使用了内部锁或者其他形式的
  并发控制。BlockingQueue 接口是java collections框架的一部分，它主要用于实现生产者-消费者问题。 
  http://www.journaldev.com/1034/java-blockingqueue-example-implementing-producer-consumer-problem
  
::什么是Callable和Future?
  Java 5在concurrency包中引入了java.util.concurrent.Callable 接口，它和Runnable接口很相似，但它可以返回一个对象
  或者抛出一个异常。Callable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法去在线程池中执行
  Callable内的任务。由于Callable任务是并行的，我们必须等待它返回的结果。java.util.concurrent.Future对象为我们
  解决了这个问题。在线程池提交Callable任务后返回了一个Future对象，使用它我们可以知道Callable任务的状态和得到
  Callable返回的执行结果。Future提供了get()方法让我们可以等待Callable结束并获取它的执行结果。
  http://www.journaldev.com/1090/java-callable-future-example
  
::什么是FutureTask?
  FutureTask是Future的一个基础实现，我们可以将它同Executors使用处理异步任务。通常我们不需要使用FutureTask类，但
  当我们打算重写Future接口的一些方法并保持原来基础的实现是，它就变得非常有用。我们可以仅仅继承于它并重写我们需要
  的方法。
  http://www.journaldev.com/1650/java-futuretask-example-program
  
::什么是并发容器的实现？
  Java集合类都是快速失败的，这就意味着当集合被改变且一个线程在使用迭代器遍历集合的时候，迭代器的next()方法将抛出
  ConcurrentModificationException异常。并发容器支持并发的遍历和并发的更新。
  主要的类有ConcurrentHashMap, CopyOnWriteArrayList 和CopyOnWriteArraySet 
  http://www.journaldev.com/378/how-to-avoid-concurrentmodificationexception-when-using-an-iterator
  
::Executors 类是什么？
  Executors为Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类提供了一些工具方法。
  Executors可以用于方便的创建线程池。  

----------------------------------------------------------

::Runnable和Thread区别: 
  在java中可有两种方式实现多线程.
  一种是继承Thread类:
      基本: Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法即可实现多线程操作了
      局限: 1. 一个类只能继承一个父类，这是此方法的局限。
            2. 对于逻辑上应该是多线程共用的数据做不到实际上的共用，而是产生不同拷贝
      实例: 
          class MyThread extends Thread{  
              private String name;  
              public MyThread(String name) {  
                  super();  
                 this.name = name;  
              }  
              public void run(){  
                  for(int i=0;i<10;i++){  
                      System.out.println("线程开始："+this.name+",i="+i);  
                  }  
              }  
          }  
          MyThread mt1=new MyThread("线程a");  
          MyThread mt2=new MyThread("线程b");  
          //mt1.run();  调用run方法是顺序执行而不是并行，调用start方法才是并行，具体原因见 http://zhidao.baidu.com/link?url=Vhwv1oBvTDdWmZP6isDWP2zHr2aDjbJb49zrukuODeC-YEMlUUIKuenjRzXwxzJP75FpIRWS-VpG2DkjgNkcRq
          //mt2.run();  
          mt1.start();  
          mt2.start();
          
      注意:
          Handler mHandler=new Handler(); 
          mHandler.post(new Runnable(){ 
              @Override public void run() {
                  // TODO Auto-generated method stub 
              } 
          });
          通过调用handler的post方法，把Runnable对象（一般是实现Runnable接口中run方法的匿名类）传过去, handler
          会在looper中调用这个Runnable的Run方法执行。Runnable是一个接口，不是一个线程，一般线程会实现Runnable。
          所以如果使用的匿名内部类是运行在UI主线程的，若使用实现这个Runnable接口的线程类，则是运行在对应线程的。
      
      HandlerThread类，顾名思义就是可以处理消息循环的线程，是一个拥有Looper的线程，可以处理消息循环。
          与其说Handler和一个线程绑定，不如说Handler是和Looper一一对应的。
            
  一种是实现Runnable接口(较多用的方法):
      基本: implements Runnable接口，override run()方法
      实例:
          class MyThread implements Runnable{  
              private String name;  
              public MyThread(String name) {  
                  this.name = name;  
              }
              @Override
              public void run(){  
                  for(int i=0;i<100;i++){  
                      System.out.println("线程开始："+this.name+",i="+i);  
                  }  
              }  
          }
          implements Runnable的类中没有start()方法，只有Thread类中才有，
          Thread类有一个构造方法：public Thread(Runnable targer)
          此构造方法接受Runnable的子类实例，也就是说可以通过Thread类来启动Runnable实现的多线程。
          MyThread mt1=new MyThread("线程a");  
          MyThread mt2=new MyThread("线程b");  
          new Thread(mt1).start();  
          new Thread(mt2).start();  
  
::Handler
  基本: Android系统中UI组件不是线程安全的，如果要更新UI，必须在主线程中更新，不可以在子线程中执行更新的操作。
        但是复杂的任务处理工作需要交给子线程去完成，所以要在子线程中用Handler对象通知主线程，让主线程做更新UI操作。
  实例: 
        public class MainActivity extends Activity implements View.OnClickListener {  
            private static final int COMPLETED = 0;  
            private TextView stateText;  
            private Button btn;  
      
            private Handler handler = new Handler() {  
                @Override  
                public void handleMessage(Message msg) {  
                    if (msg.what == COMPLETED) {  
                        stateText.setText("completed");  
                    }  
                }  
            };  
      
            @Override  
            public void onCreate(Bundle savedInstanceState) {  
                super.onCreate(savedInstanceState);  
                setContentView(R.layout.main);  
                stateText = (TextView) findViewById(R.id.tv);  
                btn = (Button) findViewById(R.id.btn);  
                btn.setOnClickListener(this);  
            }  
  
            @Override  
            public void onClick(View v) {  
                new WorkThread().start();  
            }  
      
            //工作线程  
            private class WorkThread extends Thread {  
                @Override  
                public void run() {  
                    //......处理耗时操作  
              
                    //处理完成后给handler发送消息  
                    Message msg = new Message();  
                    msg.what = COMPLETED;  
                    handler.sendMessage(msg);
                    //还有一个常用的方法sendMessageDelayed(message, delayedTimeInMilliSeconds)
                }  
            }  
        } 
        
::Looper
  Android通过Looper和Handler来实现消息循环机制。Android的消息循环是针对线程的，每个线程都可以有一个自己的
  消息队列和消息循环。Looper负责管理线程的消息队列和消息循环。通过Looper.myLooper()得到当前线程的Looper对象，
  通过Looper.getMainLooper()得到当前进程的主线程的Looper对象。
  特定线程的消息只能分发给本线程，不能跨线程和跨进程通讯。但是创建的工作线程默认是没有消息队列和消息循环的，
  如果想让工作线程具有消息队列和消息循环，就需要在线程中先调用Looper.prepare()来创建消息队列，然后调用
  Looper.loop()进入消息循环
  实例:
      class WorkThread extends Thread {  
          public Handler mHandler;  
  
          public void run() {  
              Looper.prepare();  
              mHandler = new Handler() {  
                  public void handleMessage(Message msg) {  
                      // ...处理收到的消息  
                  }  
              };  
              Looper.loop();  
          }  
      }  
      //这样这个工作线程就具有消息处理机制了
      //为什么前边的handler的实例中没有看到Looper.prepare()和Looper.loop()的调用呢？
        因为Activity是一个UI线程，运行在主线程中，Android系统会在Activity启动时默认为其创建一个消息队列和
        消息循环。

::Looper，MessageQueue和Handler
  Handler的作用是把消加特定的Looper所管理的消息队列中，并分发和处理该消队列中的消息。构造Handler的时候可以
  指定一个Looper对象，如果不指定则利用当前线程的Looper对象创建。
  Handler的两个构造方法:
  1. public Handler(Looper looper) {  
        mLooper = looper;  
        mQueue = looper.mQueue;  
        mCallback = null;  
    }
    
  2. public Handler() {  
        if (FIND_POTENTIAL_LEAKS) {  
            final Class<? extends Handler> klass = getClass();  
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&  
                    (klass.getModifiers() & Modifier.STATIC) == 0) {  
                Log.w(TAG, "The following Handler class should be static or leaks might occur: " +  
                    klass.getCanonicalName());  
            }  
        }  
  
        mLooper = Looper.myLooper();  
        if (mLooper == null) {  
            throw new RuntimeException(  
                "Can't create handler inside thread that has not called Looper.prepare()");  
        }  
        mQueue = mLooper.mQueue;  
        mCallback = null;  
    }   
    
  关系图: http://hi.csdn.net/attachment/201105/10/0_130499718434db.gif
      一个Activity中可以创建出多个工作线程，如果这些线程把他们消息放入Activity主线程的消息队列中，
      那么消息就会在主线程中处理了。因为主线程一般负责视图组件的更新操作，对于不是线程安全的视图组件来说，
      这种方式能够很好的实现视图的更新。
  那么子线程如何把消息放入主线程的消息队列中？
      只要Handler对象以主线程的Looper创建，那么当调用Handler的sendMessage方法，系统就会把消息主线程的
      消息队列，并且将会在调用handleMessage方法时处理主线程消息队列中的消息。
  另外: Handler对象管理的Looper对象是线程安全的，不管是添加消息到消息队列还是从消息队列中读取消息都是
      同步保护的，所以不会出现数据不一致现象。


  
  
  参考链接: http://www.jb51.net/article/37465.htm

http://blog.csdn.net/liuhe688/article/details/6407225


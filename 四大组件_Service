::　***注意***　Service和其他的应用组件一样，运行在进程的主线程中。这就是说如果service需要很多耗时或者阻塞的操作，需要在其
    子线程中实现。Service的存在是为了在无界面或不同界面下实现一些行为，因为Activity一旦不再当前显示就无法操作一些行为，Service为了解决这个问题
    在Android系统自身维护中，Service具有较高优先级 

::两种启动方式: 
    startService(多用于单个app内部自己的service, 用于实现应用程序自己的一些耗时任务，比如查询升级信息，并不占
    用应用程序比如Activity所属线程，而是单开线程后台执行)
    bindService(用于android系统内部的应用程序之间。它可以通过自己定义并暴露出来的接口进行程序操作。客户端建立
    一个到服务对象的连接，并通过那个连接来调用服务。连接以调用Context.bindService()方法建立，以调用 
    Context.unbindService()关闭。多个客户端可以绑定至同一个服务。如果服务此时还没有加载，bindService()会先
    加载它, 可被其他应用程序复用，比如天气预报服务，其他应用程序不需要再写这样的服务，调用已有的即可
  区别: 
    startService 调用者和服务之间没有联系，即使调用者退出了，服务依然在进行
    onCreate()->onStartCommand()->startService()->onDestroy()，
    注意其中没有onStart()，因为被onStartCommand()方法给取代了，onStart方法不推荐使用了
    bindService 调用者和绑定者绑在一起，调用者一旦退出服务也就终止了
    onCreate()->onBind()->onUnbind()->onDestroy()
    
    参考链接: http://www.cnblogs.com/onlylittlegod/archive/2011/05/15/2046652.html
              http://www.cnblogs.com/pepcod/archive/2013/02/11/2937403.html
              http://www.cnblogs.com/not-code/archive/2011/05/21/2052713.html (有关onStartCommand返回Sticky)

::LifeCycle
  :startService:
    context.startService()->onCreate()- >onStart()->Service running
    context.stopService() | ->onDestroy() ->Service stop
　　如果Service还没有运行，则android先调用onCreate()然后调用onStart()；如果Service已经运行，则只调用onStart()
　　所以一个Service的onStart方法可能会重复调用多次。
　　stopService的时候直接onDestroy，如果是调用者自己直接退出而没有调用stopService的话，Service会一直在后台
　　运行。该Service的调用者再启动起来后可以通过stopService关闭Service。
　　
　:bindService:
　  context.bindService()->onCreate()->onBind()->Service running
　　Service.onUnbind() -> onDestroy() ->Service stop
　　onBind将返回给客户端一个IBind接口实例，IBind允许客户端回调服务的方法，比如得到Service运行的状态或其他操作
　　这个时候把调用者（Context，例如Activity）会和Service绑定在一起，Context退出了，Srevice就会调用
　　onUnbind->onDestroy相应退出。所以调用bindService的生命周期为：
　　onCreate --> onBind(只一次，不可多次绑定) --> onUnbind --> onDestory。
　　在Service每一次的开启关闭过程中，只有onStart可被多次调用(通过多次startService调用)，
　　其他onCreate，onBind，onUnbind，onDestory在一个生命周期中只能被调用一次。　

::Service和IntentService的区别
  主要用于后台服务 当应用程序被挂到后台的时候，为了保证应用某些组件仍然可以工作而引入了Service这个概念，
  要强调的是Service不是独立的进程，也不是独立的线程，它是依赖于应用程序的主线程的，在更多时候不建议在
  Service中编写耗时的逻辑和操作，否则会引起ANR。这时需要引入IntentService，IntentService是继承Service的，
  那么它包含了Service的全部特性，当然也包含service的生命周期，那么与service不同的是，IntentService在执
  行onCreate操作的时候，内部开了一个线程，去执行耗时操作。异步处理服务，新开一个线程：handlerThread在线程中
  发消息，然后接受处理完成后，会清理线程，并且关掉服务。
  IntentService有以下特点：
  1）创建了一个独立的工作线程来处理所有的通过onStartCommand()传递给服务的intents。
  2）创建了一个工作队列，来逐个发送intent给onHandleIntent()。
  3）不需要主动调用stopSelft()来结束服务。因为，在所有的intent被处理完后，系统会自动关闭服务。
  4) 默认实现的onBind()返回null
  5）默认实现的onStartCommand()的目的是将intent插入到工作队列中
  
::关于防止Service并干掉
   这个topic包含很多知识点，参考这个链接 http://blog.csdn.net/dfskhgalshgkajghljgh/article/details/51374175
   0. 最最现实有用的方案，就是两个进程互相轮询查看另一个是否被干掉，如果被干掉了就把它拉起，
      具体实现 http://chenglei1986.github.io/android_app_daemon_process.html
   1. 在manifest中设置android:persistent="true"属性，但是需要权限，对第三方应用意义不大
   2. onStartCommand()返回值设为START_REDELIEVER_INTENT 或 START_STICKY
   3. 提高Service的进程等级
      Android进程分5个等级:foreground process，visible process，Service process，background process，empty process
      当系统资源吃紧的时候，会按照进程等级从低到高的顺序，同时根据进程消耗的资源从多到少的原则来kill一些进程，
      而service正处于第三个等级，如果能够提高service所在进程的等级，那么它被杀死的概率就会小一些，通常可以调用
      startForeground（）方法将Service的进程等级从第三级提升到第一级foreground process
      样例代码
         public final void startForeground(int id, Notification notification) {
             try {
                 mActivityManager.setServiceForeground(
                     new ComponentName(this, mClassName), mToken, id,
                     notification, true);
             } catch (RemoteException ex) {
             }
         }
        可以在在onCreate（）或者onStartComman()方法中调用此方法，然后可以在onDestroy（）或者其他地方调用
        stopForeground(boolean removeNotification)方法来stop
    4.提高service IntentFilter的priority等级
      intent-filter可以通过 android:priority = "1000"这个属性设置最高优先级，1000是最高值，
      如果数字越小则优先级越低，同时实用于广播   
      
:: 判断某个servcie是否在运行
    private boolean isServiceRunning(String serviceClassName){
        ActivityManager activityManager = (ActivityManager) this.getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningServiceInfo> runningServiceList = activityManager.getRunningServices(80);
        if(runningServiceList.size() < 0)
            return false;
        else {
            for(ActivityManager.RunningServiceInfo runningServiceInfo: runningServiceList){
                if(runningServiceInfo.service.getClassName().equals(serviceClassName)){
                    return true;
                }
            }
            return false;
        }
    }    
    
  http://www.cnblogs.com/yejiurui/p/3429451.html  
  
  ::Service 调用Activity中的方法
    use LocalBroadcastManager as follows:
    
    In your Service:
      // Send an Intent with an action named "my-event". 
      private void sendMessage() {
        Intent intent = new Intent("my-event");
        // add data
        intent.putExtra("message", "data");
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
      }
      
    In your Activity:
        @Override
        public void onResume() {
          super.onResume();
        
          // Register mMessageReceiver to receive messages.
          LocalBroadcastManager.getInstance(this).registerReceiver(mMessageReceiver,
              new IntentFilter("my-event"));
        }
        
        // handler for received Intents for the "my-event" event 
        private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {
          @Override
          public void onReceive(Context context, Intent intent) {
            // Extract data included in the Intent
            String message = intent.getStringExtra("message");
            Log.d("receiver", "Got message: " + message);
          }
        };
        
        @Override
        protected void onPause() {
          // Unregister since the activity is not visible
          LocalBroadcastManager.getInstance(this).unregisterReceiver(mMessageReceiver);
          super.onPause();
        }
  
::Service flags
    
    FLAG_EXTERNAL_SERVICE   
        If set, the service can be bound and run in the calling application's package, 
        rather than the package in which it is declared.
    FLAG_ISOLATED_PROCESS
        If set, the service will run in its own isolated process.
        But it causes Insecure Exception
    FLAG_SINGLE_USER
        If set, a single instance of the service will run for all users on the device.
    FLAG_STOP_WITH_TASK
        If set, the service will automatically be stopped by the system if the user removes a task that is rooted in
        one of the application's activities. There is a method in Service class --- onTaskRemoved(). If this flag
        is set true, the onTaskRemoved() won't be called
        
    these flags can be set in the manifest file, like
    <service
    android:enabled="true"
    android:name=".MyService"
    android:exported="false"
    android:stopWithTask="false" />

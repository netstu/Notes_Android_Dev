1. 避免明文传输，最好全面使用https
   https 工作原理
   1. 客户端去请求服务器的数字证书，该证书包含一个公钥，在证书购买后存储在服务器上
   2. 当服务端收到客户端请求后，会把这个数字证书回传给客户端。
   3. 客户端收到数字证书后，先验证证书真实性，如果验证通过，就从中取出公钥
   4. 客户端本地生成一个随机数，作为未来的会话私钥，利用前面的公钥进行加密
   5. 客户端把加加密后的 私钥 回传给服务器，这个过程中即使私钥被窃取也无妨，因为中间人并没有解密私钥，所以多部出里面的会话私钥
   6. 服务端接收到加密会话私钥后，利用CA购买证书时获得的解密私钥，解出真实会话私钥。至此客户端和服务端同时拥有了一个只有它们二者知道的会话私钥，
      非对称加密连接建立完成
   7. 一旦客户端和服务端建立连接，未来数据通信都用这个会话私钥进行对称加密数据传输

2. 然而，即使使用https，如果在step 3验证证书时，被欺骗，也是有可能的，即中间人攻击。
    假设攻击者已经事先通过别的手段让客户端信任了一个假证书，并在客户端请求验证证书时劫持通信，并回传这个假证书。
    
3. 为了防止上述证书欺骗，可以采取的一种方式就是，把自己的公钥直接绑定给客户端，当客户端收到证书后，与提前绑定好的公钥进行验证，从而防止假证书
    OkHttp3中，有 CertificatePinner 实现公钥绑定

4. 使用会过期的Token， 做每次request的身份识别，而不是在本地存储用户名密码

::Java中内存管理分为四大类
  强引用HardReference: HardReference对象是即使虚拟机内存吃紧抛出OOM也不会导致这一引用的对象被回收
  弱引用WeakReference: WeakReference适合于一些数量不多，但体积稍大的对象，在这四个引用中，最容易被垃圾回收
  软引用SoftReference: SoftReference不会被快速回收，但当内存短缺面临Java VM崩溃抛出OOM前时，软引用将会强制回收内存
  虚引用PhantomReference: 虚引用一般没有实际意义，仅仅观察GC的活动状态

  对于一组数据，可以通过HashMap的方式来添加一组SoftReference对象来临时保留一些数据，同时对于需要反复通过网络获取的
  不经常改变的内容，可以通过本地的文件系统或数据库来存储缓存。ListView列表的内容就可以用缓存
  
  用Map集合缓存软引用的Bitmap对象的样例
  Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();
  Bitmap bitmap = BitmapFactory.decodeStream(InputStream);
  SoftReference<Bitmap> bitmapToBeCached = new SoftReference<Bitmap>(bitmap);
  imageCache.put("1", bitmapToBeCached);
  //从缓存中取软引用的Bitmap对象
  SoftReference<Bitmap> bitmapcacheRetrieved = imageCache.get("1");
  //取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空
  Bitmap bitmapRetrieved = bitmapcacheRetrieved.get();
  如果程序中需要从网上加载大量的图片 考虑采用在sdcard上建立临时文件夹缓存这些图片
  
::应用实例(和ExecutorService)协同
  http://www.eoeandroid.com/thread-210082-1-1.html
  
::****************LruCache的使用**********************（重要)
  以前很多人使用软引用加载图片 ，但是现在已经不再推荐使用这种方式了，因为
  1）因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，
     这让软引用和弱引用变得不再可靠。
  2）另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，
     因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃
  3）LruCache类被设计专门用来做图片缓存处理。它有一个特点，当缓存的图片达到了预先设定的值的时候，
     那么近期使用次数最少的图片就会被回收掉
  所以现在使用LruCache来缓存图片，当存储Image的大小大于LruCache设定的值，系统自动释放内存，
  这个类是3.1版本中提供的，如果在更早的Android版本中开发，则需要导入android-support-v4的jar包。
  
  具体步骤 http://blog.chinaunix.net/uid-26930580-id-4138306.html
  大体上１．先设置用来缓存图片的内存大小，比如设置为runtime内存的１/8
       2. LruCache里key时图片Uri，　value是bitmap
       3. 实现一下　清空缓存、添加图片到缓存、从缓存中取得图片、从缓存中移除　几个函数
          注意　remove方法需要同步锁

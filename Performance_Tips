http://developer.android.com/training/best-performance.html

::大多数用户感知到的卡顿等性能问题的最主要根源都是因为渲染性能。从设计师的角度，他们希望App能够有更多的动画，图片等时尚元素来实现流畅的用户体验。
   但是Android系统很有可能无法及时完成那些复杂的界面渲染操作。Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，如果每次渲染都成功，这样就
   能够达到流畅的画面所需要的60fps，为了能够实现60fps，这意味着程序的大多数操作都必须在16ms内完成。如果超出这个时间，系统在得到VSYNC信号的时候
   就无法进行正常渲染，这样就发生了丢帧现象。那么用户在32ms内看到的会是同一帧画面。
   http://hukai.me/android-performance-patterns/
   
   引起性能问题的一些主要原因
   １．　Overdraw(同一区域存在好几层图), 
        在自定义View里，注意使用canvas.cliprect, canvas.quickReject 解决这个问题
   ２．Memory Churn（内存抖动)
        是对内存的不恰当使用仍然容易引起严重的性能问题。在同一帧里面创建过多的对象是件需要特别引起注意的事情。
        执行GC操作的时候，所有线程的任何操作都会需要暂停，等待GC操作完成之后，其他操作才能够继续运行
        单个的GC并不会占用太多时间，但是大量不停的GC操作则会显著占用帧间隔时间(16ms)。如果在帧间隔时间里面做了过多的GC操作，
        那么自然其他类似计算，渲染等操作的可用时间就变得少了。导致GC频繁执行的原因就是内存抖动，　即因为大量的对象被创建又在短时间内马上被释放。
        更具体得说，瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，也会触发GC。即使每次分配的对象占用
        了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。
       　常见起因及避免
          例如需要避免在for循环里面分配对象占用内存，需要尝试把对象的创建移到循环体之外，
          自定义View中的onDraw方法也需要引起注意，每次屏幕发生绘制以及动画执行过程中，onDraw方法都会被调用到，避免在onDraw方法里面执行复杂的操作，
          避免创建对象。对于那些无法避免需要创建对象的情况，我们可以考虑对象池模型，通过对象池来解决频繁创建与销毁的问题，但是这里需要注意结束使用之后，
          需要手动释放对象池中的对象。
    3. Memory leak

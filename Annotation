http://www.importnew.com/10294.html

::什么是Annotation
  用一个词就可以描述注解，那就是元数据，即一种描述数据的数据。所以，可以说注解就是源代码的元数据。比如，：
    @Override
    public String toString() {
        return "This is String Representation of current object.";
    }
  上面的代码中，我重写了toString()方法并使用了@Override注解。但是，即使我不使用@Override注解标记代码，程序也能够正常执行。
  那么，该注解表示什么？这么写有什么好处吗？事实上，@Override告诉编译器这个方法是一个重写方法(描述方法的元数据)，如果父类
  中不存在该方法，编译器便会报错，提示该方法没有重写父类中的方法。如果我不小心拼写错误，例如将toString()写成了
  toStrring(){double r}，而且我也没有使用@Override注解，那程序依然能编译运行。但运行结果会和我期望的大不相同。现在我们
  了解了什么是注解，并且使用注解有助于阅读程序。
  Annotation是一种应用于类、方法、参数、变量、构造器及包声明中的特殊修饰符。是一种由JSR-175标准选择用来描述元数据的一种工具
  
::为什么要引入注解？
  使用Annotation之前(甚至在使用之后)，XML被广泛的应用于描述元数据。不知何时开始一些应用开发人员和架构师发现XML的维护
  越来越糟糕了。他们希望使用一些和代码紧耦合的东西，而不是像XML那样和代码是松耦合的(在某些情况下甚至是完全分离的)代码描述
  如果在Google中搜索“XML vs. annotations”，会看到许多关于这个问题的辩论。最有趣的是XML配置其实就是为了分离代码和配置而引入的
  上述两种观点可能会让你很疑惑，两者观点似乎构成了一种循环，但各有利弊。下面我们通过一个例子来理解这两者的区别。
  
::Annotation是如何工作的？怎么编写自定义的Annotation？
  ** http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html
  ** http://www.cnblogs.com/mandroid/archive/2011/07/18/2109829.html

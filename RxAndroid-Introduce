RxAndroid/RxJava 主要解决的问题: 多个相关的异步调用易导致callback hell， Rx能将它们转化成链式流，逻辑上更清晰易读

****注意** 一定要在Activity onDestroy()中 unsubscribe，否则内存泄漏****

入门基础例子　http://www.infoq.com/cn/articles/RxAndroid-basics

进阶例子　　　http://www.infoq.com/cn/articles/rxandroid-basics-2

更多详细     http://science09.github.io/2016/03/30/RxAndroid%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/

::简述
  1.  基础来说 创建 Observer, 实现 onComplete, onError, onNext方法
    1.1.Observer有个扩展版叫Subscriber，比Observer多了一个onStart方法，在subscribe刚开始而事件还未发送之前被调用，做些准备工作例如
        数据清零或重置。这是一个可选方法，默认情况下它的实现为空。
        注**: 如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在subscribe所发生的
        线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法
  
  2. 创建被观察者 Observable 有三种方式
      2.1 create方式
          Observable<String> observable = Observable.create(new Observable.OnSubscribe<String>(){
              @Override
              public void call(Subscriber<? super String> subscriber){
                  subscriber.onNext("aa");
                  subscriber.onNext("bb");
                  subscriber.onNext("cc");
                  subscriber.onCompleted();
              }
          });
      2.2 just方式（最多支持10个数据)
          Observable<String> observable = Observable.just("aa", "bb". "cc");
          
      2.3 from方式
          Observerble<String> observable = Observable.from(一个集合或array)
          
      以上都是同步的情况，异步的情况要用 fromCallable\
      Observable.fromCallable(new Callable<String>() {
            @Override
            public String call() throws Exception {
                String result = /* a async api call */
                return result;
            }
        });
      
      当 Observable 被订阅的时候，OnSubscribe 的 call() 方法会自动被调用(onStart之后)，事件序列就会依照设定依次触发
  
  3. subscribe
     注** 现在observable不能subscribe(subscriber)了，只能subscribe(observer)。subscriber也不再是observer的超类，
     两者是同级接口且有些许区别
     onComplete()方法调用时会自动unsubscribe
     
     
     核心逻辑代码
     public Subscription subscribe(Subscriber subscriber) {
        subscriber.onStart();
        onSubscribe.call(subscriber);
        return subscriber; //将传入的 Subscriber 作为 Subscription 返回。这是为了方便 unsubscribe().   
     }
        
     在subscribe() 中，首先会调用 onStart() 方法，这个方法前文已经介绍了，是可选的。接着会调用 call()方法，call()方法中会调用多次 onNext() 
     最后调用 onCompleted(). 所以subscribe() 方法其实相当于依次执行了：onStart() --> onNext（）--> onCompleted（）
     从这也可以看出，在 RxJava 中，Observable 并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe() 方法执行的时候。
     Observer 和 Subscriber 具有相同的角色，而且 Observer 在 subscribe() 过程中最终会被转换成 Subscriber对象
     
     在异步的情况下
             observerble
                .subscribeOn(Schedulers.io())  // 实现在非UI线程工作
                .observeOn(AndroidSchedulers.mainThread()) // 实现onNext在UI线程被调用，从而方便更新UI
                .subscribe(observer);
                
   特别的， Observable有一个精简版的叫Single，只用onSuccess和onError两个方法
        Single<List<String>> tvShowSingle = Single.fromCallable(new Callable<List<String>>() { 
            @Override
            public List<String> call() throws Exception {
                mRestClient.getFavoriteTvShows(); 
            }
        });
        
        mTvShowSubscription = tvShowSingle
              .subscribeOn(Schedulers.io())
              .observeOn(AndroidSchedulers.mainThread())
              .subscribe(new SingleSubscriber<List<String>>() {

                  @Override 
                  public void onSuccess(List<String> tvShows) {
                      displayTvShows(tvShows); 
                  }

                  @Override 
                  public void onError(Throwable error) {
                      displayErrorMessage(); 
                  } 
              });
              
           
::Subject类
  最简单的：PublishSubject。使用PublishSubject时，一旦数据从一端注入，结果会立即从另一端输出。它既是observer也是observable
  

::map()方法
  它接收一个数据，然后输出另一个数据，当然输入输出的两个数据之间是有联系的。例
  Single.just(4).map(new Function<Integer, String>() { 
      @Override 
      public String apply(Integer integer) {  //此处只是取Integer转String作为例子，实际可以很复杂
          return String.valueOf(integer); 
      } 
  }).subscribe(new SingleSubscriber<String>() { 

      @Override 
      public void onSuccess(String value) { 
          mValueDisplay.setText(value); 
      } 

      @Override 
      public void onError(Throwable error) { } 
  }); 
  

::deboundce()方法
  比如希望用户在搜索栏type in时就有自动显示结果，但又不能一直发送request, debounce()方法就是做这个的。
  这个方法告诉在没有数据传入长达比如400毫秒时才发送数据。意思就是，仅当用户400ms都没有改变输入内容时，Subject才会发送最新的搜索字符串。
  这样以来我们就不会进行无意义的网络请求了，UI也不会每输入一个字符都更新


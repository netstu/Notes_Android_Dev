::adb相关
  adb logcat 可以在启动app之后看到launcher activity叫什么名字（adb logcat > filename,直接写入文件方便分析，>>表示append， > 表示overwrite）
      logcat *:E 可以只显error级别以上的
      logcat *:E ActivityManager:S AndroidRuntime:S NotificationService:S WindowManager:S ActivityThread:S 
      //上面一行意为屏蔽ActivityManager, AndroidRuntime, NotificationService, WindowManager, ActivityThread发出的任何信息，对于*显示E级别以上的信息
      在app中显示log  http://fonter.iteye.com/blog/477112
  adb pm(package manager)可以查到所有package名(进入adb shell后pm list packages)
  adb install [appName.apk]
  adb pull [remoteFile] [localPath(如果是pull到当前目录可以省略)],
  adb push [localFile] [remotePath] 
  adb shell 后 am start -n ｛包名｝/｛包名｝.{活动(activity)名称} 可以启动程序
  无线连接手机adbd
    手机su状态下 setprop service.adb.tcp.port 5555
    stop adbd
    start adbd 
    计算机连接手机 adb connect [手机IP]:5555
    把手机改会原来状态(不再tcp监听5555) setprop service.adb.tcp.port -1然后stop adbd, start adbd
    
有多个手机连接时
  adb -s xxxxxxx shell          xxxxxx来自于 adb devices 显示的device number

点亮屏幕(power on)
  input keyevent 26  
  
::shutdown
  adb shell
  reboot -p
    
::改变/system目录挂载的权限
  mount -o rw,remount /system    挂载为读写
  mount -o ro,remount /system    挂载为只读
    
::某些数据库位置
  电话相关 /data/data/com.android.providers.contacts/databases/contacts2.db
  短信相关 /data/data/com.android.providers.telephony/databases/mmssms.db
  
::编译-->打包jar-->转换dex-->转换oat
  javac file1.java, file2.java
  jar cvf outputName.jar file1.class  //要把class文件跟java文件放在同一级，当前目录切到src/main/java/这一级
  dx --dex --output=outputName.dex jarFile.jar
  adb shell登录后有dex2oat工具
  
::低版本兼容编译（目前用java 8编译不能在android上运行，java 7可以）
  javac -target 1.7 -source 1.7 xxx.java
  
::引入lib库的编译
  javac -cp lib.jar xxx.java
  
::获取手机上安装app信息
  基本代码：
  PackageManager packageManager = this.getPackageManager();  
  List<PackageInfo> packageInfoList = packageManager.getInstalledPackages(0); 
  通过以上方法，可以得到手机中安装的所有应用程序，既包括了手动安装的apk包的信息，也包括了系统预装的应用软件的信息，
  要区分这两类软件可使用以下方法:
    a.从packageInfoList获取的packageInfo，再通过packageInfo.applicationInfo获取applicationInfo。
    b.判断(applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM)的值，大于0表示获取的为预装的应用，反之为手动安装的
  样例方法:
    public static List<PackageInfo> getAllApps(Context context) {  
      List<PackageInfo> apps = new ArrayList<PackageInfo>();  
      PackageManager pManager = context.getPackageManager();  
      //获取手机内所有应用  
      List<PackageInfo> paklist = pManager.getInstalledPackages(0);  
      for (int i = 0; i < paklist.size(); i++) {  
          PackageInfo pak = (PackageInfo) paklist.get(i);  
          //判断是否为非系统预装的应用程序  
          if ((pak.applicationInfo.flags & pak.applicationInfo.FLAG_SYSTEM) <= 0) {  
              // customs applications  
              apps.add(pak);  
          }  
      }  
      return apps;  
    }
  
  获取图片名，应用名，包名等更多信息：见参考链接
  参考链接 http://blog.csdn.net/feng88724/article/details/6198446 

::SharedUserId的应用
  http://my.oschina.net/zhoulc/blog/119282
  http://www.blogjava.net/easywu/archive/2011/10/19/361554.html
  


tcpdump抓取网络请求 http://www.trinea.cn/android/tcpdump_wireshark/
